{"version":3,"sources":["serviceWorker.js","components/nav.jsx","components/poll.jsx","components/create_poll.jsx","components/results.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Nav","react_default","a","createElement","className","Link","to","Poll","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","isChecked","target","name","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","payload","_this$state","questions","wrap","_context","prev","next","preventDefault","_id","params","id","question","state","fetch","method","headers","Content-Type","body","JSON","stringify","sent","status","isComplete","submitted","ws","send","history","push","concat","Id","stop","_x","apply","arguments","renderQuestions","values","filter","item","map","_ref2","index","key","uuid","type","checked","onChange","WebSocket","document","host","close","pollFetch","json","pollData","_this2","nav","title","onSubmit","lib","defineProperty","text","value","onCopy","copied","console","log","Component","CreatePost","renderInput","keys","startsWith","i","number","error","placeholder","autoComplete","quest0","quest1","sort","postFetch","fetchRes","length","abrupt","reduce","obj","_Object$keys","_Object$keys2","slicedToArray","first","second","quest2","quest3","quest4","_loop","x","path","objectSpread","prevProps","prevState","_this3","ch","_this4","Results","renderResults","count","socketData","addEventListener","msg","parse","data","quest","newState","update","$set","ReactDOM","render","BrowserRouter","Switch","Route","exact","component","CreatePoll","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b61a161.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nconst Nav = () => (\n    <div className=\"navbar-fixed\">\n    <nav>\n    <div className=\"nav-wrapper purple accent-1\">\n      <Link to='/' className=\"brand-logo\">Poll App</Link>\n    </div>\n  </nav>\n  </div>\n)\n\nexport default Nav","import React, { Component } from 'react'\nimport uuid from 'uuid'\nimport Nav from './nav'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nexport default class Poll extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isChecked: `quest0`,\n            isComplete: false,\n            submitted: null,\n            questions: null,\n            ws: new WebSocket(`wss://${document.location.host}/sockets/${this.props.match.params.id}`)\n        }\n    }\n    componentWillUnmount() {\n        this.state.ws.close()\n    }\n    async componentDidMount() {\n        const pollFetch = await fetch('/api/getpoll', {\n            method: 'POST',\n            headers:{\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(this.props.match.params.id)\n            })\n         const pollData = await pollFetch.json()\n            this.setState({questions: pollData})\n    }\n    render() {\n       const { ws } = this.state\n        if (!this.state.questions) {\n            console.log('balls', this.state)\n            return (\n                <div>\n                    <Nav />\n                    <div className=\"contained\">\n                    <div className=\"preloader-wrapper big active\">\n      <div className=\"spinner-layer spinner-blue-only\">\n      <div className=\"circle-clipper left\">\n        <div className=\"circle\"></div>\n      </div><div className=\"gap-patch\">\n        <div className=\"circle\"></div>\n      </div><div className=\"circle-clipper right\">\n        <div className=\"circle\"></div>\n      </div>\n    </div>\n  </div>\n                </div>\n                </div>\n            )\n        } \n        return (\n            <div>\n                <Nav />\n            <div className=\"contained\">\n            <div className=\"poll\">\n            <h4>{this.state.questions.title}</h4>\n            <div className=\"actualpoll\">\n            <form onSubmit={this.handleSubmit}>\n            <ul> \n                {this.renderQuestions()}\n            </ul>\n            <button type=\"submit\" className=\"waves-effect waves-light btn pollbtn\">Submit Answer</button>\n            </form>\n            <CopyToClipboard text={this.state.value}\n            onCopy={() => this.setState({copied: true})} text={`https://${window.location.host}/poll/survey/${this.props.match.params.id}`} >\n          <button className=\"waves-effect waves-light btn purple accent-1 copy\">Click to copy post url</button>\n        </CopyToClipboard>\n            </div>\n            </div>\n            </div>\n            </div>\n        )\n    }\n    handleChange = (e) => {\n            this.setState({isChecked: e.target.name})\n    }\n    handleSubmit = async (e) => {\n        e.preventDefault()\n        const payload = {\n            _id: this.props.match.params.id,\n            question: this.state.isChecked\n        }\n        const updateFetch = await fetch('/api/update', {\n            method: 'POST',\n            headers:{\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(payload)\n        })\n        if (updateFetch.status === 200) {\n            const { isChecked, questions } = this.state\n            this.setState({isComplete: true, submitted: questions[isChecked]}, () => {\n                this.state.ws.send(JSON.stringify(payload))\n                this.props.history.push(`/poll/results/${this.state.questions.Id}`)\n            })\n        }\n\n    }\n    renderQuestions = () => {\n        const { questions } = this.state\n        const filtered = Object.values(questions).filter(item => item.question);\n\n        return filtered.map(({ question }, index) => {\n            if (!question) return\n            return (\n            <p key={uuid()} className=\"pollquest\">\n              <label>\n                <input name={`quest${index}`} type=\"radio\" checked={this.state.isChecked === `quest${index}`}  onChange={this.handleChange} />\n                <span>{question}</span>\n              </label>\n            </p>\n            )\n        })\n    }\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport Nav from './nav'\nexport default class CreatePost extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            error: null,\n            number: 2,\n            id: null,\n            title: '',\n            isComplete: false,\n            copied: false\n        }\n    }\n    componentWillMount() {\n        \n        for (let x = 0; x < 5; x++) {\n            const path = `quest${x}`\n            this.setState((state) => {\n                return {...state, [path]: ''}\n            })\n        }\n    }\n    componentDidUpdate(prevProps, prevState) {\n        //checks to see if all inputs have a value... it they do, another input tag is displayed\n    (() => {\n        const { number } = this.state;\n        const path = `quest${number - 1}`\n        if (!this.state[path] || this.state[path].length === 0) return;\n        let ch = 0\n        const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\n        const { state } = this\n        for (let x = 0; x < state.number; x++) {\n            \n            if (state[sort[x]] && state[sort[x]].length > 0) {\n                ch++\n                continue\n            } \n        }\n         if (ch === this.state.number) {\n            this.setState({number: this.state.number + 1})\n        }\n    })() \n    }\n    render() {\n        if (this.state.isComplete) {\n            return (\n                <div>\n                <Nav />\n            <div className=\"contained\">\n            <div className=\"poll\">\n            <h4>Poll Submitted</h4>\n\n            <div className=\"check complete\">\n            <i className=\"fa fa-check\" />\n            <CopyToClipboard text={this.state.value}\n            onCopy={() => this.setState({copied: true})} text={`https://${window.location.host}/poll/survey/${this.state.id}`} >\n          <button className=\"waves-effect waves-light btn purple accent-1 copy\">Click to copy post url</button>\n        </CopyToClipboard>\n            </div>\n            <Link to={`/poll/survey/${this.state.id}`} className=\"waves-effect waves-light btn pollbtn\">View Poll</Link>\n            </div>\n\n            </div>\n            </div>\n            ) \n        }\n        return (\n            <div>\n            <Nav />\n            <div className=\"contained\">\n            <div className=\"poll\">\n            <h4>Create a poll</h4>\n            <div className=\"actualpoll\">\n            <div className=\"check\">\n            <form onSubmit={this.handleSubmit}>\n            <div className=\"row\">\n            <div className=\"input-field col s12\">\n                 <input name=\"title\" value={this.state.title} type=\"text\" onChange={this.handleChange} autoComplete=\"off\" className={this.state.error ? \"redder\": \"\"} />\n                  <label className=\"active\">Enter a title</label>\n                    </div>\n                    </div>\n            <ul className=\"marginthis\">\n            {this.renderInput()}\n            </ul>\n            <button className=\"waves-effect waves-light btn pollbtn\">Submit poll</button>\n            </form>\n            </div>\n            </div>\n            </div>\n            </div>\n            </div>\n        )\n    }\n    handleChange = (e) => {\n        this.setState({[e.target.name]: e.target.value})\n\n    }\n    renderInput = () => {\n    const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\n       return sort.map((item, i) => {\n            if (i < this.state.number) {\n                return (\n                    <div key={i} className=\"row\">\n                    <div className=\"input-field col s12\">\n                 <input value={this.state[item]} className={this.state.error ? \"redder\" : \"\"} type=\"text\"  name={item} onChange={this.handleChange} placeholder={this.state.error || `Questions #${i + 1}`} autoComplete=\"off\"  />\n                    </div>\n                </div>\n                )\n            }\n        })\n    }\n    handleSubmit = async (e) => {\n        e.preventDefault()\n        const { quest0, quest1, title } = this.state\n        if (quest0.length === 0 || quest1.length === 0 || title.length === 0) {\n            this.setState({error: \"Please enter questions\"})\n            return\n        }\n        const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\n\n       const submitted = sort.filter((item) => {\n            if (this.state[item].length > 0) {\n                return this.state[item]\n            }\n        }).map(item => {\n           return {[item]: this.state[item], count: 0}\n        }).reduce((obj, item, i) => {\n            const [first, second] = Object.keys(item)\n            obj[first] = {question: item[first], [second]: 0}\n            obj.title = this.state.title\n           return obj\n        }, {})\n        const postFetch = await fetch('/api/create', {\n            method: 'POST',\n            headers:{\n                'Content-Type': 'application/json'\n              },\n            body: JSON.stringify(submitted)\n        })\n        const fetchRes = await postFetch.json()\n        this.setState({id: fetchRes, isComplete: true, quest0: '', quest1: '', quest2: '', quest3: '', quest4: ''})\n    }\n}","import React, { Component } from 'react'\nimport Nav from './nav'\nimport { Link } from 'react-router-dom'\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport update from 'immutability-helper';\nimport uuid from 'uuid'\nexport default class Results extends Component {\n\n        constructor(props) {\n            super(props)\n            this.state = {\n                questions: null,\n                ws: new WebSocket(`wss://${document.location.host}/sockets/${this.props.match.params.id}`),\n                socketData: null\n            }\n        }\n        componentWillUnmount() {\n            this.state.ws.close()\n        }\n        async componentDidMount() {\n            this.state.ws.addEventListener(\"message\", (msg) => {\n                this.setState({socketData: JSON.parse(msg.data)})\n            })\n            const pollFetch = await fetch('/api/getpoll', {\n                method: 'POST',\n                headers:{\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(this.props.match.params.id)\n            })\n            const pollData = await pollFetch.json()\n            this.setState({questions: pollData})\n        }\n        componentDidUpdate(prevProps, prevState) {\n            const { socketData, questions } = this.state\n            if (socketData && socketData._id === this.props.match.params.id) {\n                if (prevState.socketData !== this.state.socketData) {\n                    const quest = socketData.question\n                    const obj = questions[socketData.question]\n                    obj.count = obj.count + 1\n                    const newState = update(this.state, {\n                        questions: {[quest]: {$set: {...obj }}}\n                    })\n                    this.setState(newState)\n            }\n        }\n    }\n        render() {\n                return (\n                    <div>\n                    <Nav />\n                    <div className=\"contained\">\n                    <div className=\"poll\">\n                    <h4>The results are in!</h4>\n                    <div className=\"actualpoll\">\n                    <div className=\"check\">\n                    <ul> \n                    {this.renderResults()}\n                    </ul>\n                    </div>\n                    <Link to=\"/\" className=\"waves-effect waves-light btn pollbtn\">Create new poll</Link>\n                    <CopyToClipboard text={this.state.value}\n                           onCopy={() => this.setState({copied: true})} text={`https://${document.location.host}/poll/results/${this.props.match.params.id}`} >\n                          <button className=\"waves-effect waves-light btn purple accent-1 copyres\">Copy url to clipboard</button>\n                         </CopyToClipboard>\n                    </div>\n                    </div>\n                    </div>\n                    </div>\n                )\n\n        }\n        renderResults = () => {\n            const { questions } = this.state\n            if (!questions) {\n                return (\n                    <li className=\"thevotes\">\n                    <span>Loading results...</span>\n                </li>\n                )\n            }\n\n            const filtered = Object.values(questions).filter(item => item.question);\n            return filtered.map(({ question, count }) => {\n                return (\n                    <li key={uuid()} className=\"thevotes\">\n                        <span>{question}</span>\n                        <span className=\"votes\">{count} Votes</span>\n                    </li>\n                )\n            })\n            \n        }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\n\nimport Poll from './components/poll'\nimport CreatePoll from './components/create_poll'\nimport Results from './components/results'\n \n// const DOMNode = document.getElementById('renderTarget');\nReactDOM.render(\n<BrowserRouter>\n<Switch>\n    <Route exact path=\"/poll/survey/:id\" component={Poll} />\n    <Route exact path=\"/poll/results/:id\" component={Results} />\n    <Route path=\"/\" component={CreatePoll} />\n</Switch>\n</BrowserRouter>\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}