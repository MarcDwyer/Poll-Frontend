{"version":3,"sources":["serviceWorker.js","components/poll.jsx","components/create_poll.jsx","components/nav.jsx","components/results.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Poll","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","isChecked","target","name","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","payload","updateFetch","received","_this$state","questions","wrap","_context","prev","next","preventDefault","state","error","abrupt","_id","params","id","question","fetch","method","headers","Content-Type","body","JSON","stringify","sent","json","status","console","log","isComplete","submitted","ws","send","history","push","concat","Id","t0","stop","_x","apply","arguments","renderQuestions","values","filter","item","map","_ref2","index","react_default","createElement","key","uuid","className","lib","type","checked","onChange","label","WebSocket","document","host","close","pollFetch","pollData","_context2","title","onSubmit","Component","CreatePost","handleCB","token","postToken","success","captcha","defineProperty","value","renderInput","keys","startsWith","i","number","placeholder","autoComplete","_callee2","quest0","quest1","sort","postFetch","fetchRes","length","_ref3","reduce","obj","_Object$keys","_Object$keys2","slicedToArray","first","second","quest2","quest3","quest4","_x2","copied","_this2","_loop","x","path","objectSpread","prevProps","prevState","ch","_this3","Link","to","react_copy_to_clipboard_lib","text","onClick","dist","sitekey","action","verifyCallback","Nav","header","trigger","style","listStyle","marginLeft","React","Results","renderResults","filtered","count","total","data","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","options","scales","xAxes","ticks","beginAtZero","suggestedMin","suggestedMax","es","socketData","addEventListener","msg","parse","quest","newState","update","$set","ReactDOM","render","BrowserRouter","nav_Nav","Switch","Route","exact","component","CreatePoll","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.420c3423.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport uuid from 'uuid'\r\nimport { Input } from 'react-materialize'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\r\nexport default class Poll extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isChecked: `quest0`,\r\n            isComplete: false,\r\n            submitted: null,\r\n            questions: null,\r\n            ws: new WebSocket(`wss://${document.location.host}/sockets`),\r\n            error: null\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.state.ws.close()\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            const pollFetch = await fetch('/api/getpoll', {\r\n                method: 'POST',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  body: JSON.stringify(this.props.match.params.id)\r\n                })\r\n             const pollData = await pollFetch.json()\r\n                this.setState({questions: pollData})\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    render() {\r\n        if (!this.state.questions) {\r\n            return (\r\n                <div>\r\n                    <div className=\"contained\">\r\n                    <div className=\"preloader-wrapper big active\">\r\n      <div className=\"spinner-layer spinner-blue-only\">\r\n      <div className=\"circle-clipper left\">\r\n        <div className=\"circle\"></div>\r\n      </div><div className=\"gap-patch\">\r\n        <div className=\"circle\"></div>\r\n      </div><div className=\"circle-clipper right\">\r\n        <div className=\"circle\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n                </div>\r\n                </div>\r\n            )\r\n        } \r\n        const error = this.state.error ? this.state.error :'';\r\n        return (\r\n            <div>\r\n            <div className=\"contained\">\r\n            <div className=\"poll\">\r\n            <h4>{this.state.questions.title} <br /><small>{error}</small></h4>\r\n            <form onSubmit={this.handleSubmit}>\r\n            <div className=\"maindiv\">\r\n            <div className=\"one\">\r\n            <ul> \r\n                {this.renderQuestions()}\r\n            </ul>\r\n            </div>\r\n            <div className=\"resp-buttons two\">\r\n            <button type=\"submit\" className=\"waves-effect waves-light btn pollbtn\">Submit Answer!</button>\r\n            </div>\r\n            </div>\r\n            </form>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    handleChange = (e) => {\r\n            this.setState({isChecked: e.target.name})\r\n    }\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        if (this.state.error) return\r\n        const payload = {\r\n            _id: this.props.match.params.id,\r\n            question: this.state.isChecked\r\n        }\r\n        try {\r\n        const updateFetch = await fetch('/api/update', {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify(payload)\r\n        })\r\n        const received = await updateFetch.json()\r\n        if (received.status) {\r\n            console.log(received)\r\n            this.setState({error: \"Duplicate ip detected\"})\r\n            return\r\n        } else {\r\n            console.log(received)\r\n            const { isChecked, questions } = this.state\r\n            this.setState({isComplete: true, submitted: questions[isChecked]}, () => {\r\n                this.state.ws.send(JSON.stringify(payload))\r\n                this.props.history.push(`/poll/results/${this.state.questions.Id}`)\r\n            })\r\n        }\r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n\r\n    }\r\n    renderQuestions = () => {\r\n        const { questions } = this.state\r\n        const filtered = Object.values(questions).filter(item => item.question);\r\n\r\n        return filtered.map(({ question }, index) => {\r\n            if (!question) return null\r\n            return (\r\n            <div key={uuid()} className=\"pollquest\">\r\n                <Input name={`quest${index}`} type=\"radio\" checked={this.state.isChecked === `quest${index}`}  onChange={this.handleChange} label={question} />\r\n            </div>\r\n            )\r\n        })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { ReCaptcha } from 'react-recaptcha-v3'\r\n\r\nexport default class CreatePost extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            error: null,\r\n            number: 2,\r\n            id: null,\r\n            title: '',\r\n            isComplete: false,\r\n            copied: \"Share\",\r\n            captcha: false\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        for (let x = 0; x < 5; x++) {\r\n            const path = `quest${x}`\r\n            this.setState((state) => {\r\n                return {...state, [path]: ''}\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        //checks to see if all inputs have a value... it they do, another input tag is displayed\r\n        const { number } = this.state;\r\n        const path = `quest${number - 1}`\r\n        if (!this.state[path] || this.state[path].length === 0) return;\r\n        let ch = 0\r\n        const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\r\n        const { state } = this\r\n        for (let x = 0; x < state.number; x++) {\r\n            \r\n            if (state[sort[x]] && state[sort[x]].length > 0) {\r\n                ch++\r\n                continue\r\n            } \r\n        }\r\n         if (ch === this.state.number) {\r\n            this.setState({number: this.state.number + 1})\r\n        }\r\n    }\r\n    render() {\r\n        console.log(document.location.host)\r\n        if (this.state.isComplete) {\r\n            return (\r\n                <div>\r\n\r\n            <div className=\"contained\">\r\n            <div className=\"poll\">\r\n            <h4>Poll Submitted</h4>\r\n            <div className=\"one flexer\">\r\n            <i className=\"fa fa-check\" />\r\n            </div>\r\n            <div className=\"resp-buttons two\">\r\n            <Link to={`/poll/survey/${this.state.id}`} className=\"waves-effect waves-light btn pollbtn\">View Poll</Link>\r\n            <CopyToClipboard \r\n            text={`https://${window.location.host}/poll/survey/${this.state.id}`} >\r\n          <button className=\"waves-effect waves-light btn purple accent-1 copy sharer\" \r\n            onClick={() => {\r\n                this.setState({copied: \"URL Copied!\"})\r\n            }}\r\n          >{this.state.copied}</button>\r\n        </CopyToClipboard>\r\n            </div>\r\n            </div>\r\n\r\n            </div>\r\n            </div>\r\n            ) \r\n        }\r\n        return (\r\n\r\n            <div className=\"contained\">\r\n            <div className=\"poll\">\r\n            <h4>{this.state.error ? this.state.error : 'Create a poll'}</h4>\r\n            <form onSubmit={this.handleSubmit}>\r\n            <div className=\"maindiv\">\r\n            <div className=\"one\">\r\n            <div className=\"row\">\r\n            <div className=\"input-field col s12\">\r\n                 <input name=\"title\" value={this.state.title} type=\"text\" onChange={this.handleChange} autoComplete=\"off\" className={this.state.error ? \"redder\": \"\"} />\r\n                  <label className=\"active\">Enter a title</label>\r\n                    </div>\r\n                    </div>\r\n            <ul className=\"marginthis\">\r\n            {this.renderInput()}\r\n            </ul>\r\n            </div>\r\n            <div className=\"resp-buttons two\">\r\n            <ReCaptcha \r\n            sitekey='6LeMcYUUAAAAALOdfvlBa3Fv6rwnM7G6Id_ks2Ao'\r\n            action='action_name'\r\n            verifyCallback={this.handleCB}\r\n            />\r\n            <button className=\"waves-effect waves-light btn pollbtn\">Submit poll</button>\r\n            </div>\r\n            </div>\r\n            </form>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    handleCB = async (token) => {\r\n        try {\r\n            const postToken = await fetch ('auth', {\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  method: 'POST',\r\n                  body: JSON.stringify(token)\r\n    \r\n            })\r\n            const res = await postToken.json()\r\n            if (res.success) {\r\n                this.setState({captcha: true})\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n\r\n    }\r\n    renderInput = () => {\r\n    const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\r\n       return sort.map((item, i) => {\r\n            if (i < this.state.number) {\r\n                return (\r\n                    <div key={i} className=\"row\">\r\n                    <div className=\"input-field col s10\">\r\n                 <input value={this.state[item]} className={this.state.error ? \"redder\" : \"\"} type=\"text\"  name={item} onChange={this.handleChange} placeholder={this.state.error || `Questions #${i + 1}`} autoComplete=\"off\"  />\r\n                    </div>\r\n                </div>\r\n                )\r\n            }\r\n            return null\r\n        })\r\n    }\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const { quest0, quest1, title, captcha } = this.state\r\n        if (quest0.length === 0 || quest1.length === 0 || title.length === 0) {\r\n            this.setState({error: \"Please enter questions\"})\r\n            return\r\n        } else if (!captcha) {\r\n            this.setState({error: \"Captcha Auth Failed\"})\r\n            return\r\n        }\r\n        const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\r\n\r\n       const submitted = sort.filter((item) => {\r\n            if (this.state[item].length > 0) {\r\n                return this.state[item]\r\n            } \r\n            return null\r\n        }).map(item => {\r\n           return {[item]: this.state[item], count: 0}\r\n        }).reduce((obj, item, i) => {\r\n            const [first, second] = Object.keys(item)\r\n            obj[first] = {question: item[first], [second]: 0}\r\n            obj.title = this.state.title\r\n           return obj\r\n        }, {})\r\n        try {\r\n            const postFetch = await fetch('/api/create', {\r\n                method: 'POST',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                body: JSON.stringify(submitted)\r\n            })\r\n            const fetchRes = await postFetch.json()\r\n            this.setState({id: fetchRes, isComplete: true, quest0: '', quest1: '', quest2: '', quest3: '', quest4: ''})\r\n            } catch(err) {\r\n                console.log(err)\r\n            }\r\n    }\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Modal, Button } from 'react-materialize'\r\nexport default class Nav extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navbar-fixed\">\r\n      <nav className=\"fixer\">\r\n        <div className=\"nav-flex\">\r\n        <Link to=\"/\" className=\"brand-logo left\">Fetcher's Poll</Link>\r\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n          <li className=\"dropper\">\r\n          <Modal\r\n  header=\"Welcome to Marc Dwyer's poll app!\"\r\n  trigger={<Button className=\"dropper-btn\">Features</Button>}>\r\n    <ul>\r\n      <li style={{listStyle: \"circle\", marginLeft: '15px'}}>Web Sockets update you in real time</li>\r\n      <li style={{listStyle: \"circle\", marginLeft: '15px'}}>Polls saved to Mongodb for persisted data</li>\r\n      <li style={{listStyle: \"circle\", marginLeft: '15px'}}>Ip duplication check and Google's recaptcha v3</li>\r\n      <li style={{listStyle: \"circle\", marginLeft: '15px'}}>Making a poll is so easy you dont even notice how good it is</li>\r\n      \r\n    </ul>\r\n</Modal>\r\n          </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n      )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { Dropdown, Button, NavItem } from 'react-materialize'\r\nimport update from 'immutability-helper';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nexport default class Results extends Component {\r\n\r\n        constructor(props) {\r\n            super(props)\r\n            this.state = {\r\n                questions: null,\r\n                ws: new WebSocket(`wss://${document.location.host}/sockets`),\r\n                socketData: null,\r\n                copied: false\r\n            }\r\n        }\r\n        componentWillUnmount() {\r\n            this.state.ws.close()\r\n        }\r\n        async componentDidMount() {\r\n            this.state.ws.addEventListener(\"message\", (msg) => {\r\n                this.setState({socketData: JSON.parse(msg.data)})\r\n            })\r\n            const pollFetch = await fetch('/api/getpoll', {\r\n                method: 'POST',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  body: JSON.stringify(this.props.match.params.id)\r\n            })\r\n            const pollData = await pollFetch.json()\r\n            this.setState({questions: pollData})\r\n        }\r\n        componentDidUpdate(prevProps, prevState) {\r\n            const { socketData, questions } = this.state\r\n            if (socketData && socketData._id === this.props.match.params.id) {\r\n                if (prevState.socketData !== this.state.socketData) {\r\n                    const quest = socketData.question\r\n                    const obj = questions[socketData.question]\r\n                    obj.count = obj.count + 1\r\n                    const newState = update(this.state, {\r\n                        questions: {[quest]: {$set: {...obj }}}\r\n                    })\r\n                    this.setState(newState)\r\n            }\r\n        }\r\n    }\r\n        render() {\r\n\r\n                return (\r\n                    <div className=\"contained\">\r\n                    <div className=\"poll result\">\r\n                    <h4>The results are in!</h4>\r\n                    <div className=\"maindiv\">\r\n                    <div className=\"one\">\r\n                    <ul> \r\n                    {this.renderResults()}\r\n                    </ul>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"resp-buttons two\">\r\n                    <Link to=\"/\" className=\"waves-effect waves-light btn pollbtn\">Create new poll</Link>\r\n                    <div className=\"share\">\r\n                    <Dropdown trigger={\r\n                          <Button className=\"btn purple accent-1 sharer\">Share</Button>\r\n                      }>\r\n                    <CopyToClipboard\r\n                           text={`https://${document.location.host}/poll/survey/${this.props.match.params.id}`} >\r\n                           <NavItem>Copy url</NavItem>\r\n                         </CopyToClipboard>\r\n                        </Dropdown>\r\n                        </div>\r\n                         </div>\r\n                    </div>\r\n                    </div>\r\n                )\r\n\r\n        }\r\n        renderResults = () => {\r\n            const { questions } = this.state\r\n            if (!questions) {\r\n                return (\r\n                    <li className=\"thevotes\">\r\n                    <span>Loading results...</span>\r\n                </li>\r\n                )\r\n            }\r\n\r\n            const filtered = Object.values(questions).filter(item => item.question);\r\n            const question = filtered.map(item => `${item.question}`)\r\n            const count = filtered.map(item => item.count)\r\n            const total = filtered.reduce((total, item) => {\r\n                return total += item.count\r\n            }, 0)\r\n            const data = {\r\n                labels: question,\r\n                datasets: [\r\n                  {\r\n                    label: questions.title,\r\n                    backgroundColor: 'rgba(153,210,227,0.4)',\r\n                    borderColor: 'rgba(122,168,181,1)',\r\n                    borderWidth: 1,\r\n                    hoverBackgroundColor: 'rgba(153,210,227,.85)',\r\n                    hoverBorderColor: 'rgba(122,168,181,1)',\r\n                    data: count\r\n                  }\r\n                ]\r\n              };\r\n              const options = {\r\n                    scales: {\r\n                        xAxes: [{\r\n                            ticks: {\r\n                                beginAtZero: true,\r\n                                suggestedMin: 0,\r\n                                suggestedMax: total\r\n                            }\r\n                        }]\r\n                    }\r\n                }\r\n            return (\r\n                <HorizontalBar data={data} options={options} />\r\n            )\r\n            \r\n        }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nimport Poll from './components/poll'\r\nimport CreatePoll from './components/create_poll'\r\nimport Nav from './components/nav'\r\nimport Results from './components/results'\r\n \r\n// const DOMNode = document.getElementById('renderTarget');\r\nReactDOM.render(\r\n<BrowserRouter>\r\n<div>\r\n<Nav />\r\n<Switch>\r\n    <Route exact path=\"/poll/survey/:id\" component={Poll} />\r\n    <Route exact path=\"/poll/results/:id\" component={Results} />\r\n    <Route path=\"/\" component={CreatePoll} />\r\n</Switch>\r\n</div>\r\n</BrowserRouter>\r\n,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}