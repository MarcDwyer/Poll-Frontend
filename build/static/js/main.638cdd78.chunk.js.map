{"version":3,"sources":["serviceWorker.js","components/nav.jsx","components/poll.jsx","components/create_poll.jsx","components/results.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Nav","react_default","a","createElement","className","Link","to","Poll","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","isChecked","target","name","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","payload","_this$state","questions","wrap","_context","prev","next","preventDefault","_id","params","id","question","state","fetch","method","headers","Content-Type","body","JSON","stringify","sent","status","isComplete","submitted","ws","send","history","push","concat","Id","stop","_x","apply","arguments","renderQuestions","values","filter","item","map","_ref2","index","key","uuid","type","checked","onChange","WebSocket","document","host","close","pollFetch","json","pollData","readyState","nav","title","onSubmit","Component","CreatePost","defineProperty","value","renderInput","keys","startsWith","i","number","placeholder","autoComplete","sort","postFetch","fetchRes","length","reduce","obj","_Object$keys","_Object$keys2","slicedToArray","first","second","quest0","quest1","quest2","quest3","quest4","error","copied","_this2","_loop","x","path","objectSpread","prevProps","prevState","_this3","ch","_this4","lib","text","onCopy","Results","renderResults","count","socketData","addEventListener","msg","parse","data","quest","newState","update","$set","ReactDOM","render","BrowserRouter","Switch","Route","exact","component","CreatePoll","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.638cdd78.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nconst Nav = () => (\r\n    <div className=\"navbar-fixed\">\r\n    <nav>\r\n    <div className=\"nav-wrapper purple accent-1\">\r\n      <Link to='/' className=\"brand-logo\">Poll App</Link>\r\n    </div>\r\n  </nav>\r\n  </div>\r\n)\r\n\r\nexport default Nav","import React, { Component } from 'react'\r\nimport uuid from 'uuid'\r\nimport Nav from './nav'\r\n\r\nexport default class Poll extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isChecked: `quest0`,\r\n            isComplete: false,\r\n            submitted: null,\r\n            questions: null,\r\n            ws: new WebSocket(`ws://${document.location.host}/sockets/${this.props.match.params.id}`)\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.state.ws.close()\r\n    }\r\n    async componentDidMount() {\r\n        const pollFetch = await fetch('/api/getpoll', {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify(this.props.match.params.id)\r\n            })\r\n         const pollData = await pollFetch.json()\r\n            this.setState({questions: pollData})\r\n    }\r\n    render() {\r\n       const { ws } = this.state\r\n        if (!this.state.questions || ws.readyState !== 1) {\r\n            return (\r\n                <div>\r\n                    <Nav />\r\n                    <div className=\"contained\">\r\n                    <div className=\"preloader-wrapper big active\">\r\n    <div className=\"spinner-layer spinner-blue-only\">\r\n      <div className=\"circle-clipper left\">\r\n        <div className=\"circle\"></div>\r\n      </div><div className=\"gap-patch\">\r\n        <div className=\"circle\"></div>\r\n      </div><div className=\"circle-clipper right\">\r\n        <div className=\"circle\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n                </div>\r\n                </div>\r\n            )\r\n        } \r\n        return (\r\n            <div>\r\n                <Nav />\r\n            <div className=\"contained\">\r\n            <div className=\"poll\">\r\n            <h4>{this.state.questions.title}</h4>\r\n            <div className=\"actualpoll\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <ul> \r\n                {this.renderQuestions()}\r\n            </ul>\r\n            <button type=\"submit\" className=\"waves-effect waves-light btn pollbtn\">Submit Answer</button>\r\n            </form>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    handleChange = (e) => {\r\n            this.setState({isChecked: e.target.name})\r\n    }\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const payload = {\r\n            _id: this.props.match.params.id,\r\n            question: this.state.isChecked\r\n        }\r\n        const updateFetch = await fetch('/api/update', {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify(payload)\r\n        })\r\n        if (updateFetch.status === 200) {\r\n            const { isChecked, questions } = this.state\r\n            this.setState({isComplete: true, submitted: questions[isChecked]}, () => {\r\n                this.state.ws.send(JSON.stringify(payload))\r\n                this.props.history.push(`/poll/results/${this.state.questions.Id}`)\r\n            })\r\n        }\r\n\r\n    }\r\n    renderQuestions = () => {\r\n        const { questions } = this.state\r\n        const filtered = Object.values(questions).filter(item => item.question);\r\n\r\n        return filtered.map(({ question }, index) => {\r\n            if (!question) return\r\n            return (\r\n            <p key={uuid()}>\r\n              <label>\r\n                <input name={`quest${index}`} type=\"radio\" checked={this.state.isChecked === `quest${index}`}  onChange={this.handleChange} />\r\n                <span>{question}</span>\r\n              </label>\r\n            </p>\r\n            )\r\n        })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport Nav from './nav'\r\nexport default class CreatePost extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            error: null,\r\n            number: 2,\r\n            id: null,\r\n            title: '',\r\n            isComplete: false,\r\n            copied: false\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        \r\n        for (let x = 0; x < 5; x++) {\r\n            const path = `quest${x}`\r\n            this.setState((state) => {\r\n                return {...state, [path]: ''}\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        //checks to see if all inputs have a value... it they do, another input tag is displayed\r\n    (() => {\r\n        const { number } = this.state;\r\n        const path = `quest${number - 1}`\r\n        if (!this.state[path] || this.state[path].length === 0) return;\r\n        let ch = 0\r\n        const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\r\n        const { state } = this\r\n        for (let x = 0; x < state.number; x++) {\r\n            \r\n            if (state[sort[x]] && state[sort[x]].length > 0) {\r\n                ch++\r\n                continue\r\n            } \r\n        }\r\n         if (ch === this.state.number) {\r\n            this.setState({number: this.state.number + 1})\r\n        }\r\n    })() \r\n    }\r\n    render() {\r\n        if (this.state.isComplete) {\r\n            return (\r\n                <div>\r\n                <Nav />\r\n            <div className=\"contained\">\r\n            <div className=\"poll\">\r\n            <h4>Poll Submitted</h4>\r\n            <div className=\"actualpoll\">\r\n            <div className=\"check\">\r\n            <i className=\"fa fa-check\" />\r\n            <CopyToClipboard text={this.state.value}\r\n            onCopy={() => this.setState({copied: true})} text={`${window.location.host}/poll/survey/${this.state.id}`} >\r\n          <button className=\"waves-effect waves-light btn purple accent-1 copy\">Click to copy post url</button>\r\n        </CopyToClipboard>\r\n            </div>\r\n            <Link to={`/poll/survey/${this.state.id}`} className=\"waves-effect waves-light btn pollbtn\">View Poll</Link>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            ) \r\n        }\r\n        return (\r\n            <div>\r\n            <Nav />\r\n            <div className=\"contained\">\r\n            <div className=\"poll\">\r\n            <h4>Create a poll</h4>\r\n            <div className=\"actualpoll\">\r\n            <div className=\"check\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <div className=\"row\">\r\n    <div className=\"input-field col s12\">\r\n      <input name=\"title\" value={this.state.title} id=\"first_name2\" type=\"text\" onChange={this.handleChange} autoComplete=\"off\" />\r\n      <label className=\"active\">Enter a title</label>\r\n    </div>\r\n  </div>\r\n            <ul className=\"marginthis\">\r\n            {this.renderInput()}\r\n            </ul>\r\n            <button className=\"waves-effect waves-light btn pollbtn\">Submit poll</button>\r\n            </form>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n\r\n    }\r\n    renderInput = () => {\r\n    const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\r\n       return sort.map((item, i) => {\r\n            if (i < this.state.number) {\r\n                return (\r\n                    <div key={i} className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                 <input value={this.state[item]} id={`item${i}`} type=\"text\" className=\"validate\" name={item} onChange={this.handleChange} placeholder={`Questions #${i + 1}`} autoComplete=\"off\"  />\r\n                    </div>\r\n                </div>\r\n                )\r\n            }\r\n        })\r\n    }\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const sort = Object.keys(this.state).filter(item => item.startsWith('quest'))\r\n\r\n       const submitted = sort.filter((item) => {\r\n            if (this.state[item].length > 0) {\r\n                return this.state[item]\r\n            }\r\n        }).map(item => {\r\n           return {[item]: this.state[item], count: 0}\r\n        }).reduce((obj, item, i) => {\r\n            const [first, second] = Object.keys(item)\r\n            obj[first] = {question: item[first], [second]: 0}\r\n            obj.title = this.state.title\r\n           return obj\r\n        }, {})\r\n        const postFetch = await fetch('/api/create', {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n              },\r\n            body: JSON.stringify(submitted)\r\n        })\r\n        const fetchRes = await postFetch.json()\r\n        this.setState({id: fetchRes, isComplete: true, quest0: '', quest1: '', quest2: '', quest3: '', quest4: ''})\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport Nav from './nav'\r\nimport { Link } from 'react-router-dom'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport update from 'immutability-helper';\r\nimport uuid from 'uuid'\r\nexport default class Results extends Component {\r\n\r\n        constructor(props) {\r\n            super(props)\r\n            this.state = {\r\n                questions: null,\r\n                ws: new WebSocket(`ws://${document.location.host}/sockets/${this.props.match.params.id}`),\r\n                socketData: null\r\n            }\r\n        }\r\n        componentWillUnmount() {\r\n            this.state.ws.close()\r\n        }\r\n        async componentDidMount() {\r\n            this.state.ws.addEventListener(\"message\", (msg) => {\r\n                this.setState({socketData: JSON.parse(msg.data)})\r\n            })\r\n            const pollFetch = await fetch('/api/getpoll', {\r\n                method: 'POST',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                  },\r\n                  body: JSON.stringify(this.props.match.params.id)\r\n            })\r\n            const pollData = await pollFetch.json()\r\n            this.setState({questions: pollData})\r\n        }\r\n        componentDidUpdate(prevProps, prevState) {\r\n            const { socketData, questions } = this.state\r\n            if (socketData && socketData._id === this.props.match.params.id) {\r\n                if (prevState.socketData !== this.state.socketData) {\r\n                    const quest = socketData.question\r\n                    const obj = questions[socketData.question]\r\n                    obj.count = obj.count + 1\r\n                    const newState = update(this.state, {\r\n                        questions: {[quest]: {$set: {...obj }}}\r\n                    })\r\n                    this.setState(newState)\r\n            }\r\n        }\r\n    }\r\n        render() {\r\n                return (\r\n                    <div>\r\n                    <Nav />\r\n                    <div className=\"contained\">\r\n                    <div className=\"poll\">\r\n                    <h4>The results are in!</h4>\r\n                    <div className=\"actualpoll\">\r\n                    <div className=\"check\">\r\n                    <ul> \r\n                    {this.renderResults()}\r\n                    </ul>\r\n                    </div>\r\n                    <Link to=\"/\" className=\"waves-effect waves-light btn pollbtn\">Create new poll</Link>\r\n                    <CopyToClipboard text={this.state.value}\r\n                           onCopy={() => this.setState({copied: true})} text={`${document.location.host}/poll/results/${this.props.match.params.id}`} >\r\n                          <button className=\"waves-effect waves-light btn purple accent-1 copyres\">Copy url to clipboard</button>\r\n                         </CopyToClipboard>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n                )\r\n\r\n        }\r\n        renderResults = () => {\r\n            const { questions } = this.state\r\n            if (!questions) {\r\n                return (\r\n                    <li className=\"thevotes\">\r\n                    <span>Loading results...</span>\r\n                </li>\r\n                )\r\n            }\r\n\r\n            const filtered = Object.values(questions).filter(item => item.question);\r\n            return filtered.map(({ question, count }) => {\r\n                return (\r\n                    <li key={uuid()} className=\"thevotes\">\r\n                        <span>{question}</span>\r\n                        <span className=\"votes\">{count} Votes</span>\r\n                    </li>\r\n                )\r\n            })\r\n            \r\n        }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nimport Poll from './components/poll'\r\nimport CreatePoll from './components/create_poll'\r\nimport Results from './components/results'\r\n \r\n// const DOMNode = document.getElementById('renderTarget');\r\nReactDOM.render(\r\n<BrowserRouter>\r\n<Switch>\r\n    <Route exact path=\"/poll/survey/:id\" component={Poll} />\r\n    <Route exact path=\"/poll/results/:id\" component={Results} />\r\n    <Route path=\"/\" component={CreatePoll} />\r\n</Switch>\r\n</BrowserRouter>\r\n,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}